{"version":3,"sources":["logo.svg","Map.js","DateSlider.js","DataSelector.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Leaflet","props","Map","center","zoom","TileLayer","url","attribution","this","infectedOn","data","infectedData","date","color","recoveredOn","recoveredData","deathOn","deathData","React","Component","MyCircles","map","row","i","Circle","key","radius","Math","sqrt","fillOpacity","fillColor","stroke","date_of_first_case","Date","DateSlider","handleChange","bind","event","newValue","result","setDate","getDate","handleDateChange","d","getMonth","getFullYear","toString","substr","join","formatDate","difference_in_time","getTime","difference_in_days","floor","marks","value","label","Typography","id","gutterBottom","Slider","defaultValue","onChange","getAriaValueText","aria-labelledby","valueLabelDisplay","max","dict","defaultVal","keys","e","DataSelector","FormGroup","FormControlLabel","control","Checkbox","checked","toggleInfectedData","className","style","toggleRecoveredData","toggleDeathData","name","App","state","parsedInfectedData","pullAndParseUrl","parsedRecoveredData","parsedDeathData","then","setState","selectedDate","Grid","container","justify","alignItems","spacing","item","xs","variant","axios","get","response","Papa","parse","header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e122a630.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { Map, Circle, TileLayer } from 'react-leaflet';\n\n\nexport default class Leaflet extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    const position = [35, -40];\n    const zoom = 2;\n    return (\n      <Map center={position} zoom={zoom}>\n        <TileLayer\n          url={\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n          attribution={'&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'}\n        />\n        {this.props.infectedOn &&\n          <MyCircles data={this.props.infectedData} date={this.props.date} color=\"red\"/>\n        }\n        {this.props.recoveredOn &&\n          <MyCircles data={this.props.recoveredData} date={this.props.date} color=\"green\"/>\n        }\n        {this.props.deathOn &&\n          <MyCircles data={this.props.deathData} date={this.props.date} color=\"black\"/>\n        }\n      </Map>)\n  }\n}\n\nconst MyCircles = (props) => {\n  return (\n    props.data.map((row, i) => {\n      if (row[props.date] <= 0) {\n        // No cases on this date\n        return;\n      }\n      if (row[\"Lat\"] != null && row[\"Long\"] != null) {\n        return (\n          <Circle\n            key={i}\n            center={[row[\"Lat\"], row[\"Long\"]]}\n            radius={1000 * Math.sqrt(row[props.date])}\n            fillOpacity={0.5}\n            fillColor={props.color}\n            stroke={false}\n          />)\n        }\n      }\n    )\n  );\n}\n","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\n// first date w/ data\nconst date_of_first_case = new Date(\"01/22/2020\");\n\nfunction formatDate(date) {\n  var d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear().toString().substr(-2);\n\n  return [month, day, year].join('/');\n}\n\nexport default class DateSlider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  static getDictKeys(dict, defaultVal) {\n    try {\n      return (dict.keys());\n    } catch (e) {\n      return defaultVal;\n    }\n  }\n\n  handleChange(event, newValue) {\n    var result = new Date(\"01/22/2020\");\n    result.setDate(result.getDate() + newValue);\n    this.props.handleDateChange(formatDate(result));\n  }\n  render() {\n\n    const date_today = new Date();\n    // To calculate the time difference of two dates\n    const difference_in_time = date_today.getTime() - date_of_first_case.getTime();\n    // To calculate the no. of days between two dates (subtract 1 since data is only updated at 23:59)\n    const difference_in_days = Math.floor(difference_in_time / (1000 * 3600 * 24)) - 1;\n\n    const marks = [\n      {\n        value: 0,\n        label: \"Day 0\",\n      },\n      {\n        value: difference_in_days,\n        label: \"Yesterday\",\n      },\n    ];\n    return (\n      <>\n        <Typography id=\"continuous-slider\" gutterBottom>\n          Days since January 22nd, 2020:\n    </Typography>\n        <br />\n        <br />\n        <Slider\n          defaultValue={0}\n          onChange={this.handleChange}\n          getAriaValueText={\"\"}\n          aria-labelledby=\"continuous-slider\"\n          valueLabelDisplay=\"on\"\n          marks={marks}\n          max={difference_in_days}\n        />\n      </>)\n  }\n}\n","import React from 'react';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nexport default class DataSelector extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t}\n\trender() {\n\treturn (\n\t\t<FormGroup row>\n\t      <FormControlLabel\n\t        control={<Checkbox checked={this.props.infectedOn} onChange={this.props.toggleInfectedData} className=\"checkedA\" style={{color:'red'}}/>}\n\t        label=\"Infected\"\n\t      />\n\t      <FormControlLabel\n\t        control={<Checkbox checked={this.props.recoveredOn} onChange={this.props.toggleRecoveredData} className=\"checkedB\" style={{color:'green'}}/>}\n\t        label=\"Recovered\"\n\t      />\n\t      <FormControlLabel\n\t        control={<Checkbox checked={this.props.deathOn} onChange={this.props.toggleDeathData} name=\"checkedC\" style={{color:'black'}}/>}\n\t        label=\"Dead\"\n\t      />\n\t    </FormGroup>\n    )\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Papa from \"papaparse\";\nimport axios from \"axios\";\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport Leaflet from \"./Map.js\";\nimport DateSlider from \"./DateSlider.js\";\nimport DataSelector from \"./DataSelector.js\";\n\nconst infectedUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\";\nconst recoveredUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv\";\nconst deathUrl = \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv\"\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      infectedData: [],\n      deathData: [],\n      recoveredData: [],\n      date: \"1/22/20\",\n      infectedOn: true,\n      deathOn: false,\n      recoveredOn: false,\n    };\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.toggleInfectedData = this.toggleInfectedData.bind(this);\n    this.toggleRecoveredData = this.toggleRecoveredData.bind(this);\n    this.toggleDeathData = this.toggleDeathData.bind(this);\n\n  }\n\n  componentDidMount() {\n    const parsedInfectedData = App.pullAndParseUrl(infectedUrl);\n    const parsedRecoveredData = App.pullAndParseUrl(recoveredUrl);\n    const parsedDeathData = App.pullAndParseUrl(deathUrl);\n\n    parsedInfectedData.then(result => {\n      this.setState({ infectedData: result.data });\n    });\n\n    parsedRecoveredData.then(result => {\n      this.setState({ recoveredData: result.data });\n    });\n\n    parsedDeathData.then(result => {\n      this.setState({ deathData: result.data });\n    });\n  }\n\n  static pullAndParseUrl(url) {\n    return axios.get(url).then(response => { return response.data }).then(result => Papa.parse(result, { header: true }));\n  }\n\n\n  handleDateChange(selectedDate) {\n    this.setState({ \"date\": selectedDate });\n  };\n\n  toggleInfectedData() {\n    this.setState({infectedOn: !this.state.infectedOn});\n  }\n\n  toggleRecoveredData() {\n    this.setState({recoveredOn: !this.state.recoveredOn});\n  }\n\n  toggleDeathData() {\n    this.setState({deathOn: !this.state.deathOn});\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid container justify=\"center\"   alignItems=\"center\" spacing={3}>\n          <Grid item xs={8}>\n            <Typography id=\"title\" variant='h3'>\n              Visualizing COVID-19 Over Time\n            </Typography>\n          </Grid>\n          <Grid item xs={10}>\n            <Leaflet\n              infectedData={this.state.infectedData}\n              infectedOn={this.state.infectedOn}\n              recoveredData={this.state.recoveredData}\n              recoveredOn={this.state.recoveredOn}\n              deathData={this.state.deathData}\n              deathOn={this.state.deathOn}\n              date={this.state.date}\n            />\n          </Grid>\n          <Grid item xs={8}>\n            {this.state.date}\n            <DateSlider\n              handleDateChange={this.handleDateChange}\n            />\n          </Grid>\n          <Grid item xs={8}>\n            <DataSelector\n              toggleInfectedData={this.toggleInfectedData}\n              infectedOn={this.state.infectedOn}\n              toggleRecoveredData={this.toggleRecoveredData}\n              recoveredOn={this.state.recoveredOn}\n              toggleDeathData={this.toggleDeathData}\n              deathOn={this.state.deathOn}\n            />\n          </Grid>\n          <Grid item xs={8}>\n            <Typography id=\"title\" variant='caption'>\n              This is a depiction of the spread of COVID-19 over time. We rely on the Johns Hopkins CSSE Data Repository, which is\n              updated once a day at around 23:59 UTC. For that reason, the most recent data our slider allows users to select is\n              yesterday's.\n            </Typography>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}