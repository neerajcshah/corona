{"version":3,"sources":["logo.svg","Map.js","DateSlider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Leaflet","props","Map","center","zoom","TileLayer","url","attribution","this","data","map","row","i","date","CircleMarker","key","radius","Math","sqrt","fillOpacity","fillColor","stroke","React","Component","date_of_first_case","Date","DateSlider","handleChange","bind","event","newValue","result","setDate","getDate","handleDateChange","d","getMonth","getFullYear","toString","substr","join","formatDate","difference_in_time","getTime","difference_in_days","floor","marks","value","label","Typography","id","gutterBottom","Slider","defaultValue","onChange","getAriaValueText","aria-labelledby","valueLabelDisplay","max","dict","defaultVal","keys","e","App","state","covid_data","pullUrl","then","Papa","parse","header","setState","selectedDate","className","Grid","container","justify","spacing","item","xs","axios","get","response","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0bb9f1d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { Map, CircleMarker, TileLayer } from 'react-leaflet';\n\nexport default class Leaflet extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n\n    const position = [36.7, -119.4];\n    const zoom = 5;\n    return (\n      <Map center={position} zoom={zoom}>\n        <TileLayer\n          url={\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"}\n          attribution={'&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'}\n        />\n        {this.props.data.map((row, i) => {\n\n          if (row[this.props.date] <= 0) {\n            // No cases on this date\n            return;\n          }\n          if (row[\"Lat\"] != null && row[\"Long\"] != null) {\n            return (\n              <CircleMarker\n                key={i}\n                center={[row[\"Lat\"], row[\"Long\"]]}\n                radius={Math.sqrt(row[this.props.date])}\n                fillOpacity={0.5}\n                fillColor={\"red\"}\n                stroke={false}\n              />)\n          }\n        }\n        )}\n      </Map>)\n  }\n}\n","import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\n// first date w/ data\nconst date_of_first_case = new Date(\"01/22/2020\");\n\nfunction formatDate(date) {\n  var d = new Date(date),\n    month = '' + (d.getMonth() + 1),\n    day = '' + d.getDate(),\n    year = d.getFullYear().toString().substr(-2);\n\n  return [month, day, year].join('/');\n}\n\nexport default class DateSlider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  static getDictKeys(dict, defaultVal) {\n    try {\n      return (dict.keys());\n    } catch (e) {\n      return defaultVal;\n    }\n  }\n\n  handleChange(event, newValue) {\n    var result = new Date(\"01/22/2020\");\n    result.setDate(result.getDate() + newValue);\n    this.props.handleDateChange(formatDate(result));\n  }\n  render() {\n\n    const date_today = new Date();\n    // To calculate the time difference of two dates\n    const difference_in_time = date_today.getTime() - date_of_first_case.getTime();\n    // To calculate the no. of days between two dates\n    const difference_in_days = Math.floor(difference_in_time / (1000 * 3600 * 24));\n\n    const marks = [\n      {\n        value: 0,\n        label: \"Day 0\",\n      },\n      {\n        value: difference_in_days,\n        label: \"Today\",\n      },\n    ];\n    return (\n      <>\n        <Typography id=\"continuous-slider\" gutterBottom>\n          Days since January 22nd, 2020:\n    </Typography>\n        <br />\n        <br />\n        <Slider\n          defaultValue={0}\n          onChange={this.handleChange}\n          getAriaValueText={\"\"}\n          aria-labelledby=\"continuous-slider\"\n          valueLabelDisplay=\"on\"\n          marks={marks}\n          max={difference_in_days}\n        />\n      </>)\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Papa from \"papaparse\";\nimport axios from \"axios\";\nimport Grid from '@material-ui/core/Grid';\n\nimport Leaflet from \"./Map.js\";\nimport DateSlider from \"./DateSlider.js\";\n\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      covid_data: ([]),\n      date: \"1/22/20\",\n    };\n    this.handleDateChange = this.handleDateChange.bind(this);\n  }\n\n  componentDidMount() {\n    const parsedUrl = App.pullUrl().then(result => Papa.parse(result, { header: true }));\n    parsedUrl.then(result => {\n      this.setState({ covid_data: result.data });\n    });\n  }\n\n  static pullUrl() {\n    return axios.get(\"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv\")\n      .then(response => { return response.data })\n  }\n\n  handleDateChange(selectedDate) {\n    this.setState({ date: selectedDate });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid container justify=\"center\" spacing={3}>\n          <Grid item xs={12}>\n            <Leaflet\n              data={this.state.covid_data}\n              date={this.state.date}\n            />\n          </Grid>\n          <Grid item xs={8}>\n            {this.state.date}\n            <DateSlider\n              handleDateChange={this.handleDateChange}\n            />\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}